BEGIN TRANSACTION;
DROP TABLE IF EXISTS "FileInfo";
CREATE TABLE IF NOT EXISTS "FileInfo" (
	"id"	INTEGER,
	"path"	TEXT NOT NULL,
	"duration"	INT,
	"resolution"	VARCHAR(20) NOT NULL,
	"bitrate"	VARCHAR(20) NOT NULL,
	"codec"	VARCHAR(20) NOT NULL,
	PRIMARY KEY("id")
);
DROP TABLE IF EXISTS "VideoTokens";
CREATE TABLE IF NOT EXISTS "VideoTokens" (
	"id"	INTEGER,
	"fileId"	INT NOT NULL,
	"token"	TEXT NOT NULL,
	"expires"	DATE NOT NULL,
	PRIMARY KEY("id"),
	FOREIGN KEY("fileId") REFERENCES "FileInfo"("id") ON DELETE RESTRICT ON UPDATE RESTRICT
);
DROP TABLE IF EXISTS "ExternalIds";
CREATE TABLE IF NOT EXISTS "ExternalIds" (
	"id"	INTEGER,
	"imdbId"	VARCHAR(15),
	"tmdbId"	INT,
	"traktId"	INT,
	"tvdbId"	INT,
	PRIMARY KEY("id")
);
DROP TABLE IF EXISTS "Show";
CREATE TABLE IF NOT EXISTS "Show" (
	"showId"	VARCHAR(15),
	"name"	VARCHAR(255) NOT NULL,
	"sinopsis"	TEXT NOT NULL,
	"totalSeasons"	INT NOT NULL DEFAULT 0,
	"totalEpisodes"	INT NOT NULL DEFAULT 0,
	"imgPoster"	TEXT,
	"imgBackground"	TEXT,
	"path"	TEXT NOT NULL,
	"externalIds"	INT NOT NULL,
	PRIMARY KEY("showId"),
	FOREIGN KEY("externalIds") REFERENCES "ExternalIds"("id") ON DELETE SET NULL ON UPDATE CASCADE
);
DROP TABLE IF EXISTS "Video";
CREATE TABLE IF NOT EXISTS "Video" (
	"id"	INTEGER,
	"fileId"	INT,
	"showId"	VARCHAR(15) NOT NULL,
	"imdbId"	VARCHAR(15),
	"name"	VARCHAR(255) NOT NULL,
	"season"	INT NOT NULL,
	"episodeNumber"	INT NOT NULL,
	"sinopsis"	TEXT NOT NULL,
	"imgPoster"	TEXT,
	"externalIds"	INT NOT NULL,
	"airDate"	DATE NOT NULL DEFAULT '0001-01-01',
	PRIMARY KEY("id"),
	FOREIGN KEY("fileId") REFERENCES "FileInfo"("id") ON DELETE RESTRICT ON UPDATE RESTRICT,
	FOREIGN KEY("showId") REFERENCES "Show"("showId") ON DELETE RESTRICT ON UPDATE RESTRICT,
	FOREIGN KEY("externalIds") REFERENCES "ExternalIds"("id") ON DELETE SET NULL ON UPDATE CASCADE
);
DROP TABLE IF EXISTS "User";
CREATE TABLE IF NOT EXISTS "User" (
	"id"	INTEGER,
	"name"	VARCHAR(255) NOT NULL,
	"password"	VARCHAR(128) NOT NULL,
	PRIMARY KEY("id")
);
DROP TABLE IF EXISTS "Seen";
CREATE TABLE IF NOT EXISTS "Seen" (
	"id"	INTEGER,
	"userId"	INT NOT NULL,
	"videoId"	INT NOT NULL,
	"seen"	BOOLEAN NOT NULL DEFAULT FALSE,
	PRIMARY KEY("id"),
	FOREIGN KEY("videoId") REFERENCES "Video"("id") ON DELETE RESTRICT ON UPDATE RESTRICT,
	FOREIGN KEY("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE RESTRICT
);
DROP TABLE IF EXISTS "NotificationQueue";
CREATE TABLE IF NOT EXISTS "NotificationQueue" (
	"id"	INTEGER,
	"userId"	INT NOT NULL,
	"content"	TEXT NOT NULL,
	"read"	BOOLEAN NOT NULL DEFAULT FALSE,
	PRIMARY KEY("id"),
	FOREIGN KEY("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE RESTRICT
);
DROP TABLE IF EXISTS "Following";
CREATE TABLE IF NOT EXISTS "Following" (
	"id"	INTEGER,
	"userId"	INT NOT NULL,
	"showId"	VARCHAR(15) NOT NULL,
	"following"	BOOLEAN NOT NULL DEFAULT FALSE,
	PRIMARY KEY("id"),
	FOREIGN KEY("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE RESTRICT,
	FOREIGN KEY("showId") REFERENCES "Show"("showId") ON DELETE RESTRICT ON UPDATE RESTRICT
);
DROP INDEX IF EXISTS "VideoTokens_token";
CREATE UNIQUE INDEX IF NOT EXISTS "VideoTokens_token" ON "VideoTokens" (
	"token"
);
DROP INDEX IF EXISTS "Video_imdbId";
CREATE UNIQUE INDEX IF NOT EXISTS "Video_imdbId" ON "Video" (
	"imdbId"
);
DROP INDEX IF EXISTS "User_name";
CREATE UNIQUE INDEX IF NOT EXISTS "User_name" ON "User" (
	"name"
);
COMMIT;
